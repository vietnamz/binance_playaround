#!/usr/bin/env python3

import requests
import time
import os

key = os.environ.get('binance_key_thuan')
secret = os.environ.get('binance_secret_thuan')
print("key = " + key)
print("secret =" + secret)


def get_server_time():
    r =requests.get('http://api.binance.com/api/v3/time')
    if r.status_code != 200:
        raise r.raise_for_status()
    json = r.json()
    return json['serverTime']


def generate_timestamp():
    return int(time.time() * 1000)


def generate_recvwindow():
    return str(10000)


def generate_signature(query):
    import hmac
    import hashlib
    secret_key = secret.encode('utf8')
    query = "&timestamp=" + str(generate_timestamp()) + "&recvWindow={}".format(generate_recvwindow()) + "&" + query
    total_params = query.encode('utf8')
    signature = hmac.new(secret_key, total_params, hashlib.sha256).hexdigest()
    print("signature = {0}".format(signature))
    query = '{}&signature={}'.format(query, signature)
    print(query)
    return query, signature


def test_get_all_order(params):
    query, sig = generate_signature(params)
    res = requests.get('https://api.binance.com/api/v3/allOrders?{}'.format(query), headers={"X-MBX-APIKEY":key})
    return res


def test_get_account_info(params):
    query, sig = generate_signature(params)
    res = requests.get('https://api.binance.com/api/v3/account?{}'.format(query), headers={"X-MBX-APIKEY":key})
    return res


def test_get_all_order_list(params):
    query, sig = generate_signature(params)
    res = requests.get('https://api.binance.com/api/v3/allOrderList?{}'.format(query), headers={"X-MBX-APIKEY":key})
    return res


def test_get_all_open_order_list(params):
    query, sig = generate_signature(params)
    res = requests.get('https://api.binance.com/api/v3/openOrderList?{}'.format(query), headers={"X-MBX-APIKEY":key})
    return res


import argparse
# handle command line arguments
ap = argparse.ArgumentParser()

ap.add_argument('-p', '--params',
                type=str,
                default='',
                help="query prams excluding recvWindow, timestamp and signature. "
                     "'symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1'"
                )

args = ap.parse_args()

import pprint

pprint.pprint(test_get_all_order(args.params).json())